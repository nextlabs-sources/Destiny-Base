<!-- FIX ME - Fix Exception frameworfk to not use RESOURCE BUNDLE!!! -->
<project name="common-framework" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
	<var name="nlbuildroot" value="${basedir}/../../.." />
	<property name="common.build.script.dir" value="${nlbuildroot}/build_scripts" />

	<!-- Load build properties -->
	<property file="${basedir}/build.properties" />

	<!-- Import required common build files -->
	<import file="${common.build.script.dir}/java_build.xml" />
	<import file="${common.build.script.dir}/wsdl_build.xml" />
    <import file="${common.build.script.dir}/obfuscate_build.xml" />
	
	<path id="xlib.classpath">
			<fileset dir="${build.root.dir}/../xlib/jar">
				<include name="**/*.jar" />
			</fileset>
	 </path>

	<target name="init" depends="java_build.init, wsdl_build.init, obfuscate_build.init" />

	<target name="pre_compile" depends="resolve, wsdl_build.pre_compile" unless="wsdl_build_uptodate">
		<mkdir dir="${src.gen.dir}" />
		<java classname="org.apache.axis2.schema.XSD2Java" fork="true">
		  	<classpath refid="xlib.classpath"/>
		  	<arg file="${src.wsdl.dir}/../xsd/com/bluejungle/destiny/framework/types/BasicFaults.xsd"/>
		  	<arg file="${src.gen.dir}"/>
		 </java>
		<java classname="org.apache.axis2.schema.XSD2Java" fork="true">
		  	<classpath refid="xlib.classpath"/>
		  	<arg file="${src.wsdl.dir}/../xsd/com/bluejungle/destiny/framework/types/BasicTypes.xsd"/>
		  	<arg file="${src.gen.dir}"/>
		 </java>
		<java classname="org.apache.axis2.schema.XSD2Java" fork="true">
		  	<classpath refid="xlib.classpath"/>
		  	<arg file="${src.wsdl.dir}/../xsd/com/bluejungle/destiny/framework/types/Search.xsd"/>
		  	<arg file="${src.gen.dir}"/>
		 </java>
	</target>

	<target name="compile" depends="jni, wsdl_build.compile, java_build.compile"/>
	<target name="jni">
        <javac srcdir="${src.main.dir}" destdir="${build.dir}" includeantruntime="false">
            <compilerarg value="-h"/>
            <compilerarg value="${build.dir}"/>
            <include name="**/NetworkUtils.java"/>
        </javac>
    </target>

	<target name="package" depends="copy_resource, compile">
		<jar destfile="${build.dir}/common-framework-types.jar">
			<fileset dir="${build.gen.classes.dir}" />
		</jar>

		<jar destfile="${build.dir}/common-framework.jar" basedir="${build.main.classes.dir}">
			<exclude name="**/crypt/*.class"/>
			<exclude name="com/nextlabs/random/**"/>
			<exclude name="**/framework/test/**"/>
		</jar>

		<jar destfile="${build.dir}/common-framework-test.jar">
			<fileset dir="${build.test.classes.dir}"/>
            <fileset dir="${build.main.classes.dir}">
                <include name="**/framework/test/**"/>
            </fileset>
		</jar>

		<jar destfile="${build.dir}/cli.jar" basedir="${build.main.classes.dir}">
			<include name="com/nextlabs/shared/tools/**" />
			<include name="com/bluejungle/framework/patterns/EnumBase*.class" />
			<include name="com/bluejungle/framework/patterns/IEnum.class" />
			<include name="com/bluejungle/framework/utils/ArrayUtils.class" />
			<include name="com/bluejungle/framework/utils/CollectionUtils.class" />
			<include name="com/bluejungle/framework/utils/Formatter.class" />
			<include name="com/bluejungle/framework/utils/IPair.class" />
			<include name="com/bluejungle/framework/utils/Pair.class" />
			<include name="com/bluejungle/framework/utils/StringUtils*.class" />
		</jar>

		<jar destfile="${build.dir}/random.jar">
			<fileset dir="${build.main.classes.dir}">
				<include name="com/nextlabs/random/*.class"/>
			</fileset>
			<fileset dir="${build.main.resource.dir}">
				<include name="com/nextlabs/random/**"/>
			</fileset>
		</jar>
        <property name="initial.jar.name" location="${build.dir}/orig-crypt.jar" />
        <property name="final.jar.name" location="${build.dir}/crypt.jar" />
        <property name="obfuscation.jars" value="&lt;jar in=&quot;${initial.jar.name}&quot; out=&quot;${final.jar.name}&quot;/&gt;"/>
  
		<jar manifest="${build.main.resource.dir}/crypt-manifest.txt" 
		     destfile="${initial.jar.name}" 
			 basedir="${build.main.classes.dir}" 
			 defaultexcludes="true">
			<include name="**/crypt/*.class"/>
			<include name="com/bluejungle/framework/utils/CodecHelper.class"/>
			<include name="com/nextlabs/random/RandomString.class"/>
		</jar>

        <!-- We had to copy this logic over from obfuscate_build.xml because it's tricky to invoke that method from here -->
        <if>
          <equals arg1="${build.without.obfuscation}" arg2="yes"/>
          <then>
            <copy file="${initial.jar.name}" tofile="${final.jar.name}" overwrite="true"/>
          </then>
          <else>
            <allatori config="${nlbuildroot}/src/build-scripts/etc/allatori-config.xml" />
          </else>
        </if>

		<copy todir="${build.dir}" >
			<fileset dir="${build.wsdl.temp.dir}" includes="*.xsd"/>
		</copy>
	</target>
</project>
